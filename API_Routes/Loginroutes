const { User } = require('../Models(userSchema)/userSchema');
//const crypto = require('crypto').randomBytes(256).toString('hex');
var LocalStorage = require('node-localstorage').LocalStorage,
localStorage = new LocalStorage('./scratch');

require('dotenv/config');
const secret =process.env.secret;
var token = undefined;




const UserOTPVerification = require('../Models(userSchema)/userOTPVerification');
const nodemailer = require('nodemailer');
const bcrypt = require('bcrypt-nodejs');
//console.log(User);
const express = require('express');
const router = express.Router();

let transporter = nodemailer.createTransport({
    host: 'smtp.gmail.com',
    auth: {
        
        user: 'srivashivam20@gmail.com',
        pass: "oiffbyqtnntllgnv"
    }
})
// importing json web token

const jwt = require('jsonwebtoken');
// Login route

router.post('/login', (req, res) => {

    let [first, second] = Object.keys(req.body);
    console.log(first , second);
    if(Object.keys(req.body).length>2 || first!='email' || second!='password'){
        res.json({success:"False" , message : "Please donot add Extra/Invalid/Empty fields in the Request Body"});
    }
    else {
    if (!req.body.email) {
        res.json({ success: false, message: "Please provide a Email_ID" });
    }
    else {
        if (!req.body.password) {
            res.json({ success: false, message: "Please provide a password" });
        }
        else {
            //finding user in database
            // will get either error or user
            User.findOne({ email: req.body.email.toLowerCase() }, (err, user) => {
                if (err) {
                    res.json({ success: false, message: err })
                }
                else {
                    if (!user) {
                        res.json({ success: false, message: "User Not Found!!" })
                    }
                    else {
                        // Decrypt password method we created in user.js , will use that method
                        // const email=req.body.email;
                        const validPassword = user.comparePassword(req.body.password);
                        if (!validPassword) {
                            res.json({ success: false, message: "Password Invalid" })
                        }
                        else {
                            // encrypting userid and using secret token to let browser know that particular user sign in 
                            // userId coming from user object above we use if(!user)  // user will log out in 24h


                            // test this in postman and create some function for login in authservice




                            // OTP :

         token = jwt.sign({ email: user._id }, secret,  { expiresIn: '180s' });
        module.exports = token;
                           // localStorage.setItem('token', token);
                          //  console.log(localStorage);
                            res.json({ success: true,message: "Valid User !! Otp is sent to user's email id and your token will expire in 180 seconds " , token :token, email: user.email });


                            const sendOTPVerificationEmail = async (email, _id, res) => {
                                try {
                                    const otp = `${Math.floor(1000 + Math.random() * 9000)}`;
                                    const mailOptions = {
                                        from: 'HR@elred.io',
                                        to: email,
                                        subject: "Email Verification !!",
                                        html: `<p>Enter <b>${otp}</b> in the app to verify your email address and complete LOGIN  </p>
                                         <p><b> This OTP is going to be expired in an hour !! </b></p>
                                         `
                                    }
                                    
                                           const newOTPVerification=await new UserOTPVerification(
                                               {
                                                   userID : _id,
                                                   OTP: otp,
                                                   createdAt : Date.now(),
                                                   expiresAt : Date.now() +10 ,
                                               }
                                           );
                                           await newOTPVerification.save(),
                                    await transporter.sendMail(mailOptions);

                                }
                                catch (error) {
                                    console.log("Error !!", error);
                                };


                            }
                            sendOTPVerificationEmail(user.email, user._id);

                             }
                    }
                }
            }
            )


        }
    }
}});

router.post('/logout',(req,res)=>
{

token=undefined;
res.json({message : "You have been successfully logged out !! Please login again to access other APIs"});
});


module.exports = router;



